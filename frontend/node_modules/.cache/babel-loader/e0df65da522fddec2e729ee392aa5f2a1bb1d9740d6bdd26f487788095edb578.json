{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parve\\\\Desktop\\\\book system\\\\frontend\\\\src\\\\components\\\\Books.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n\n// const Books = ({ token }) => {\n//   const [books, setBooks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchBooks = async () => {\n//       try {\n//         const response = await fetch('http://localhost:7000/books');\n//         const data = await response.json();\n//         setBooks(data);\n//       } catch (error) {\n//         console.error(\"Error fetching books:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchBooks();\n//   }, []);\n\n//   if (loading) {\n//     return <p>Loading books...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>Books</h1>\n//       {books.length === 0 ? (\n//         <p>No books available.</p>\n//       ) : (\n//         <ul>\n//           {books.map((book) => (\n//             <li key={book.id}>\n//               <h3>{book.title}</h3>\n//               <p>{book.author}</p>\n//               <p>{book.description}</p>\n//               <img src={book.coverImage} alt={book.title} style={{ width: '150px' }} />\n//               {token && (\n//                 <button onClick={() => alert(`Editing book with ID: ${book.id}`)}>\n//                   Edit\n//                 </button>\n//               )}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Books;\n\n// --------------------------------------------------------\n// import React, { useEffect, useState } from 'react';\n\n// const Books = ({ token }) => {\n//   const [books, setBooks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [editBook, setEditBook] = useState(null); // Store the book being edited\n//   const [editFormData, setEditFormData] = useState({\n//     title: '',\n//     author: '',\n//     description: '',\n//     coverImage: ''\n//   }); // Store the edited book data\n\n//   useEffect(() => {\n//     const fetchBooks = async () => {\n//       try {\n//         const response = await fetch('http://localhost:7000/books');\n//         const data = await response.json();\n//         setBooks(data);\n//       } catch (error) {\n//         console.error(\"Error fetching books:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchBooks();\n//   }, []);\n\n//   const handleDelete = async (bookId) => {\n//     const confirmDelete = window.confirm('Are you sure you want to delete this book?');\n\n//     if (confirmDelete) {\n//       try {\n//         const response = await fetch(`http://localhost:7000/books/${bookId}`, {\n//           method: 'DELETE',\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to delete book');\n//         }\n\n//         // Remove the deleted book from the state\n//         setBooks((prevBooks) => prevBooks.filter((book) => book.id !== bookId));\n//         alert('Book deleted successfully!');\n//       } catch (error) {\n//         console.error(\"Error deleting book:\", error);\n//         alert('Failed to delete book');\n//       }\n//     }\n//   };\n\n//   const handleEdit = (book) => {\n//     setEditBook(book);\n//     setEditFormData({\n//       title: book.title,\n//       author: book.author,\n//       description: book.description,\n//       coverImage: book.coverImage\n//     });\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleEditSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await fetch(`http://localhost:7000/books/${editBook.id}`, {\n//         method: 'PUT',\n//         body: JSON.stringify(editFormData),\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to update book');\n//       }\n\n//       const updatedBook = await response.json();\n//       setBooks((prevBooks) =>\n//         prevBooks.map((book) =>\n//           book.id === updatedBook.id ? updatedBook : book\n//         )\n//       );\n//       alert('Book updated successfully!');\n//       setEditBook(null); // Close the modal after editing\n//     } catch (error) {\n//       console.error(\"Error updating book:\", error);\n//       alert('Failed to update book');\n//     }\n//   };\n\n//   if (loading) {\n//     return <p>Loading books...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>Books</h1>\n//       {books.length === 0 ? (\n//         <p>No books available.</p>\n//       ) : (\n//         <ul>\n//           {books.map((book) => (\n//             <li key={book.id}>\n//               <h3>{book.title}</h3>\n//               <p>{book.author}</p>\n//               <p>{book.description}</p>\n//               <img src={book.coverImage} alt={book.title} style={{ width: '150px' }} />\n\n//               {token && (\n//                 <>\n//                   <button onClick={() => handleEdit(book)}>\n//                     Edit\n//                   </button>\n//                   <button\n//                     onClick={() => handleDelete(book.id)}\n//                     style={{ backgroundColor: 'red', color: 'white', marginLeft: '10px' }}\n//                   >\n//                     Delete\n//                   </button>\n//                 </>\n//               )}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {/* Edit Book Modal */}\n//       {editBook && (\n//         <div style={modalStyles}>\n//           <div style={modalContentStyles}>\n//             <h2>Edit Book</h2>\n//             <form onSubmit={handleEditSubmit}>\n//               <label>\n//                 Title:\n//                 <input\n//                   type=\"text\"\n//                   name=\"title\"\n//                   value={editFormData.title}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </label>\n//               <br />\n//               <label>\n//                 Author:\n//                 <input\n//                   type=\"text\"\n//                   name=\"author\"\n//                   value={editFormData.author}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </label>\n//               <br />\n//               <label>\n//                 Description:\n//                 <textarea\n//                   name=\"description\"\n//                   value={editFormData.description}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </label>\n//               <br />\n//               <label>\n//                 Cover Image URL:\n//                 <input\n//                   type=\"text\"\n//                   name=\"coverImage\"\n//                   value={editFormData.coverImage}\n//                   onChange={handleChange}\n//                 />\n//               </label>\n//               <br />\n//               <button type=\"submit\">Save Changes</button>\n//               <button\n//                 type=\"button\"\n//                 onClick={() => setEditBook(null)} // Close the modal without saving\n//                 style={{ backgroundColor: 'gray', color: 'white', marginLeft: '10px' }}\n//               >\n//                 Cancel\n//               </button>\n//             </form>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const modalStyles = {\n//   position: 'fixed',\n//   top: 0,\n//   left: 0,\n//   right: 0,\n//   bottom: 0,\n//   backgroundColor: 'rgba(0, 0, 0, 0.5)',\n//   display: 'flex',\n//   justifyContent: 'center',\n//   alignItems: 'center',\n//   zIndex: 1000,\n// };\n\n// const modalContentStyles = {\n//   backgroundColor: 'white',\n//   padding: '20px',\n//   borderRadius: '5px',\n//   maxWidth: '500px',\n//   width: '100%',\n// };\n\n// export default Books;\n\n// ----------------------------------------------------------------------\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Books = ({\n  token\n}) => {\n  _s();\n  const [books, setBooks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editBook, setEditBook] = useState(null); // Store the book being edited\n  const [editFormData, setEditFormData] = useState({\n    title: '',\n    author: '',\n    description: '',\n    coverImage: '',\n    publicationDate: '' // Added publicationDate to form data\n  }); // Store the edited book data\n\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        const response = await fetch('http://localhost:7000/books');\n        const data = await response.json();\n        setBooks(data);\n      } catch (error) {\n        console.error(\"Error fetching books:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchBooks();\n  }, []);\n  const handleDelete = async bookId => {\n    const confirmDelete = window.confirm('Are you sure you want to delete this book?');\n    if (confirmDelete) {\n      try {\n        const response = await fetch(`http://localhost:7000/books/${bookId}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to delete book');\n        }\n\n        // Remove the deleted book from the state\n        setBooks(prevBooks => prevBooks.filter(book => book.id !== bookId));\n        alert('Book deleted successfully!');\n      } catch (error) {\n        console.error(\"Error deleting book:\", error);\n        alert('Failed to delete book');\n      }\n    }\n  };\n  const handleEdit = book => {\n    setEditBook(book);\n    setEditFormData({\n      title: book.title,\n      author: book.author,\n      description: book.description,\n      coverImage: book.coverImage,\n      publicationDate: book.publicationDate // Set the publication date when editing\n    });\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleEditSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:7000/books/${editBook.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(editFormData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update book');\n      }\n      const updatedBook = await response.json();\n      setBooks(prevBooks => prevBooks.map(book => book.id === updatedBook.id ? updatedBook : book));\n      alert('Book updated successfully!');\n      setEditBook(null); // Close the modal after editing\n    } catch (error) {\n      console.error(\"Error updating book:\", error);\n      alert('Failed to update book');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading books...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), books.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No books available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: books.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: book.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: book.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: book.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: book.coverImage,\n          alt: book.title,\n          style: {\n            width: '150px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 15\n        }, this), token && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEdit(book),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDelete(book.id),\n            style: {\n              backgroundColor: 'red',\n              color: 'white',\n              marginLeft: '10px'\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)]\n      }, book.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }, this), editBook && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: modalStyles,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: modalContentStyles,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit Book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"title\",\n              value: editFormData.title,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Author:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"author\",\n              value: editFormData.author,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Description:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"description\",\n              value: editFormData.description,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Cover Image URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"coverImage\",\n              value: editFormData.coverImage,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Publication Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"publicationDate\",\n              value: editFormData.publicationDate,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setEditBook(null) // Close the modal without saving\n            ,\n            style: {\n              backgroundColor: 'gray',\n              color: 'white',\n              marginLeft: '10px'\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 5\n  }, this);\n};\n_s(Books, \"Om0Su3i7Gme/XjZIaRa+eoTSWAk=\");\n_c = Books;\nconst modalStyles = {\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  zIndex: 1000\n};\nconst modalContentStyles = {\n  backgroundColor: 'white',\n  padding: '20px',\n  borderRadius: '5px',\n  maxWidth: '500px',\n  width: '100%'\n};\nexport default Books;\nvar _c;\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Books","token","_s","books","setBooks","loading","setLoading","editBook","setEditBook","editFormData","setEditFormData","title","author","description","coverImage","publicationDate","fetchBooks","response","fetch","data","json","error","console","handleDelete","bookId","confirmDelete","window","confirm","method","ok","Error","prevBooks","filter","book","id","alert","handleEdit","handleChange","e","name","value","target","prevState","handleEditSubmit","preventDefault","body","JSON","stringify","headers","updatedBook","map","children","fileName","_jsxFileName","lineNumber","columnNumber","length","src","alt","style","width","onClick","backgroundColor","color","marginLeft","modalStyles","modalContentStyles","onSubmit","type","onChange","required","_c","position","top","left","right","bottom","display","justifyContent","alignItems","zIndex","padding","borderRadius","maxWidth","$RefreshReg$"],"sources":["C:/Users/parve/Desktop/book system/frontend/src/components/Books.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n\r\n// const Books = ({ token }) => {\r\n//   const [books, setBooks] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const fetchBooks = async () => {\r\n//       try {\r\n//         const response = await fetch('http://localhost:7000/books');\r\n//         const data = await response.json();\r\n//         setBooks(data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching books:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchBooks();\r\n//   }, []);\r\n\r\n//   if (loading) {\r\n//     return <p>Loading books...</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Books</h1>\r\n//       {books.length === 0 ? (\r\n//         <p>No books available.</p>\r\n//       ) : (\r\n//         <ul>\r\n//           {books.map((book) => (\r\n//             <li key={book.id}>\r\n//               <h3>{book.title}</h3>\r\n//               <p>{book.author}</p>\r\n//               <p>{book.description}</p>\r\n//               <img src={book.coverImage} alt={book.title} style={{ width: '150px' }} />\r\n//               {token && (\r\n//                 <button onClick={() => alert(`Editing book with ID: ${book.id}`)}>\r\n//                   Edit\r\n//                 </button>\r\n//               )}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Books;\r\n\r\n\r\n// --------------------------------------------------------\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// const Books = ({ token }) => {\r\n//   const [books, setBooks] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [editBook, setEditBook] = useState(null); // Store the book being edited\r\n//   const [editFormData, setEditFormData] = useState({\r\n//     title: '',\r\n//     author: '',\r\n//     description: '',\r\n//     coverImage: ''\r\n//   }); // Store the edited book data\r\n\r\n//   useEffect(() => {\r\n//     const fetchBooks = async () => {\r\n//       try {\r\n//         const response = await fetch('http://localhost:7000/books');\r\n//         const data = await response.json();\r\n//         setBooks(data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching books:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchBooks();\r\n//   }, []);\r\n\r\n//   const handleDelete = async (bookId) => {\r\n//     const confirmDelete = window.confirm('Are you sure you want to delete this book?');\r\n    \r\n//     if (confirmDelete) {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:7000/books/${bookId}`, {\r\n//           method: 'DELETE',\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error('Failed to delete book');\r\n//         }\r\n\r\n//         // Remove the deleted book from the state\r\n//         setBooks((prevBooks) => prevBooks.filter((book) => book.id !== bookId));\r\n//         alert('Book deleted successfully!');\r\n//       } catch (error) {\r\n//         console.error(\"Error deleting book:\", error);\r\n//         alert('Failed to delete book');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleEdit = (book) => {\r\n//     setEditBook(book);\r\n//     setEditFormData({\r\n//       title: book.title,\r\n//       author: book.author,\r\n//       description: book.description,\r\n//       coverImage: book.coverImage\r\n//     });\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setEditFormData((prevState) => ({\r\n//       ...prevState,\r\n//       [name]: value,\r\n//     }));\r\n//   };\r\n\r\n//   const handleEditSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:7000/books/${editBook.id}`, {\r\n//         method: 'PUT',\r\n//         body: JSON.stringify(editFormData),\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to update book');\r\n//       }\r\n\r\n//       const updatedBook = await response.json();\r\n//       setBooks((prevBooks) =>\r\n//         prevBooks.map((book) =>\r\n//           book.id === updatedBook.id ? updatedBook : book\r\n//         )\r\n//       );\r\n//       alert('Book updated successfully!');\r\n//       setEditBook(null); // Close the modal after editing\r\n//     } catch (error) {\r\n//       console.error(\"Error updating book:\", error);\r\n//       alert('Failed to update book');\r\n//     }\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return <p>Loading books...</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Books</h1>\r\n//       {books.length === 0 ? (\r\n//         <p>No books available.</p>\r\n//       ) : (\r\n//         <ul>\r\n//           {books.map((book) => (\r\n//             <li key={book.id}>\r\n//               <h3>{book.title}</h3>\r\n//               <p>{book.author}</p>\r\n//               <p>{book.description}</p>\r\n//               <img src={book.coverImage} alt={book.title} style={{ width: '150px' }} />\r\n              \r\n//               {token && (\r\n//                 <>\r\n//                   <button onClick={() => handleEdit(book)}>\r\n//                     Edit\r\n//                   </button>\r\n//                   <button\r\n//                     onClick={() => handleDelete(book.id)}\r\n//                     style={{ backgroundColor: 'red', color: 'white', marginLeft: '10px' }}\r\n//                   >\r\n//                     Delete\r\n//                   </button>\r\n//                 </>\r\n//               )}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n\r\n//       {/* Edit Book Modal */}\r\n//       {editBook && (\r\n//         <div style={modalStyles}>\r\n//           <div style={modalContentStyles}>\r\n//             <h2>Edit Book</h2>\r\n//             <form onSubmit={handleEditSubmit}>\r\n//               <label>\r\n//                 Title:\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"title\"\r\n//                   value={editFormData.title}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <label>\r\n//                 Author:\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"author\"\r\n//                   value={editFormData.author}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <label>\r\n//                 Description:\r\n//                 <textarea\r\n//                   name=\"description\"\r\n//                   value={editFormData.description}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <label>\r\n//                 Cover Image URL:\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"coverImage\"\r\n//                   value={editFormData.coverImage}\r\n//                   onChange={handleChange}\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <button type=\"submit\">Save Changes</button>\r\n//               <button\r\n//                 type=\"button\"\r\n//                 onClick={() => setEditBook(null)} // Close the modal without saving\r\n//                 style={{ backgroundColor: 'gray', color: 'white', marginLeft: '10px' }}\r\n//               >\r\n//                 Cancel\r\n//               </button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const modalStyles = {\r\n//   position: 'fixed',\r\n//   top: 0,\r\n//   left: 0,\r\n//   right: 0,\r\n//   bottom: 0,\r\n//   backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n//   display: 'flex',\r\n//   justifyContent: 'center',\r\n//   alignItems: 'center',\r\n//   zIndex: 1000,\r\n// };\r\n\r\n// const modalContentStyles = {\r\n//   backgroundColor: 'white',\r\n//   padding: '20px',\r\n//   borderRadius: '5px',\r\n//   maxWidth: '500px',\r\n//   width: '100%',\r\n// };\r\n\r\n// export default Books;\r\n\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst Books = ({ token }) => {\r\n  const [books, setBooks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [editBook, setEditBook] = useState(null); // Store the book being edited\r\n  const [editFormData, setEditFormData] = useState({\r\n    title: '',\r\n    author: '',\r\n    description: '',\r\n    coverImage: '',\r\n    publicationDate: '', // Added publicationDate to form data\r\n  }); // Store the edited book data\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:7000/books');\r\n        const data = await response.json();\r\n        setBooks(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching books:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBooks();\r\n  }, []);\r\n\r\n  const handleDelete = async (bookId) => {\r\n    const confirmDelete = window.confirm('Are you sure you want to delete this book?');\r\n    \r\n    if (confirmDelete) {\r\n      try {\r\n        const response = await fetch(`http://localhost:7000/books/${bookId}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete book');\r\n        }\r\n\r\n        // Remove the deleted book from the state\r\n        setBooks((prevBooks) => prevBooks.filter((book) => book.id !== bookId));\r\n        alert('Book deleted successfully!');\r\n      } catch (error) {\r\n        console.error(\"Error deleting book:\", error);\r\n        alert('Failed to delete book');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEdit = (book) => {\r\n    setEditBook(book);\r\n    setEditFormData({\r\n      title: book.title,\r\n      author: book.author,\r\n      description: book.description,\r\n      coverImage: book.coverImage,\r\n      publicationDate: book.publicationDate, // Set the publication date when editing\r\n    });\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setEditFormData((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleEditSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:7000/books/${editBook.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(editFormData),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update book');\r\n      }\r\n\r\n      const updatedBook = await response.json();\r\n      setBooks((prevBooks) =>\r\n        prevBooks.map((book) =>\r\n          book.id === updatedBook.id ? updatedBook : book\r\n        )\r\n      );\r\n      alert('Book updated successfully!');\r\n      setEditBook(null); // Close the modal after editing\r\n    } catch (error) {\r\n      console.error(\"Error updating book:\", error);\r\n      alert('Failed to update book');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading books...</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Books</h1>\r\n      {books.length === 0 ? (\r\n        <p>No books available.</p>\r\n      ) : (\r\n        <ul>\r\n          {books.map((book) => (\r\n            <li key={book.id}>\r\n              <h3>{book.title}</h3>\r\n              <p>{book.author}</p>\r\n              <p>{book.description}</p>\r\n              <img src={book.coverImage} alt={book.title} style={{ width: '150px' }} />\r\n              \r\n              {token && (\r\n                <>\r\n                  <button onClick={() => handleEdit(book)}>\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    onClick={() => handleDelete(book.id)}\r\n                    style={{ backgroundColor: 'red', color: 'white', marginLeft: '10px' }}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {/* Edit Book Modal */}\r\n      {editBook && (\r\n        <div style={modalStyles}>\r\n          <div style={modalContentStyles}>\r\n            <h2>Edit Book</h2>\r\n            <form onSubmit={handleEditSubmit}>\r\n              <label>\r\n                Title:\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  value={editFormData.title}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Author:\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"author\"\r\n                  value={editFormData.author}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Description:\r\n                <textarea\r\n                  name=\"description\"\r\n                  value={editFormData.description}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Cover Image URL:\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"coverImage\"\r\n                  value={editFormData.coverImage}\r\n                  onChange={handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Publication Date:\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"publicationDate\"\r\n                  value={editFormData.publicationDate}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <br />\r\n              <button type=\"submit\">Save Changes</button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => setEditBook(null)} // Close the modal without saving\r\n                style={{ backgroundColor: 'gray', color: 'white', marginLeft: '10px' }}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst modalStyles = {\r\n  position: 'fixed',\r\n  top: 0,\r\n  left: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  zIndex: 1000,\r\n};\r\n\r\nconst modalContentStyles = {\r\n  backgroundColor: 'white',\r\n  padding: '20px',\r\n  borderRadius: '5px',\r\n  maxWidth: '500px',\r\n  width: '100%',\r\n};\r\n\r\nexport default Books;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}