{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parve\\\\Desktop\\\\book system\\\\frontend\\\\src\\\\components\\\\Books.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n\n// const Books = ({ token }) => {\n//   const [books, setBooks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [editBook, setEditBook] = useState(null); // Store the book being edited\n//   const [editFormData, setEditFormData] = useState({\n//     title: '',\n//     author: '',\n//     description: '',\n//     coverImage: '',\n//     publicationDate: '', // Added publicationDate to form data\n//   }); // Store the edited book data\n\n//   useEffect(() => {\n//     const fetchBooks = async () => {\n//       try {\n//         const response = await fetch('http://localhost:7000/books');\n//         const data = await response.json();\n//         setBooks(data);\n//       } catch (error) {\n//         console.error(\"Error fetching books:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchBooks();\n//   }, []);\n\n//   const handleDelete = async (bookId) => {\n//     const confirmDelete = window.confirm('Are you sure you want to delete this book?');\n\n//     if (confirmDelete) {\n//       try {\n//         const response = await fetch(`http://localhost:7000/books/${bookId}`, {\n//           method: 'DELETE',\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Failed to delete book');\n//         }\n\n//         // Remove the deleted book from the state\n//         setBooks((prevBooks) => prevBooks.filter((book) => book.id !== bookId));\n//         alert('Book deleted successfully!');\n//       } catch (error) {\n//         console.error(\"Error deleting book:\", error);\n//         alert('Failed to delete book');\n//       }\n//     }\n//   };\n\n//   const handleEdit = (book) => {\n//     setEditBook(book);\n//     setEditFormData({\n//       title: book.title,\n//       author: book.author,\n//       description: book.description,\n//       coverImage: book.coverImage,\n//       publicationDate: book.publicationDate, // Set the publication date when editing\n//     });\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleEditSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       const response = await fetch(`http://localhost:7000/books/${editBook.id}`, {\n//         method: 'PUT',\n//         body: JSON.stringify(editFormData),\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to update book');\n//       }\n\n//       const updatedBook = await response.json();\n//       setBooks((prevBooks) =>\n//         prevBooks.map((book) =>\n//           book.id === updatedBook.id ? updatedBook : book\n//         )\n//       );\n//       alert('Book updated successfully!');\n//       setEditBook(null); // Close the modal after editing\n//     } catch (error) {\n//       console.error(\"Error updating book:\", error);\n//       alert('Failed to update book');\n//     }\n//   };\n\n//   if (loading) {\n//     return <p>Loading books...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>Books</h1>\n//       {books.length === 0 ? (\n//         <p>No books available.</p>\n//       ) : (\n//         <ul>\n//           {books.map((book) => (\n//             <li key={book.id}>\n//               <h3>{book.title}</h3>\n//               <p>{book.author}</p>\n//               <p>{book.description}</p>\n//               <img src={book.coverImage} alt={book.title} style={{ width: '150px' }} />\n\n//               {token && (\n//                 <>\n//                   <button onClick={() => handleEdit(book)}>\n//                     Edit\n//                   </button>\n//                   <button\n//                     onClick={() => handleDelete(book.id)}\n//                     style={{ backgroundColor: 'red', color: 'white', marginLeft: '10px' }}\n//                   >\n//                     Delete\n//                   </button>\n//                 </>\n//               )}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {/* Edit Book Modal */}\n//       {editBook && (\n//         <div style={modalStyles}>\n//           <div style={modalContentStyles}>\n//             <h2>Edit Book</h2>\n//             <form onSubmit={handleEditSubmit}>\n//               <label>\n//                 Title:\n//                 <input\n//                   type=\"text\"\n//                   name=\"title\"\n//                   value={editFormData.title}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </label>\n//               <br />\n//               <label>\n//                 Author:\n//                 <input\n//                   type=\"text\"\n//                   name=\"author\"\n//                   value={editFormData.author}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </label>\n//               <br />\n//               <label>\n//                 Description:\n//                 <textarea\n//                   name=\"description\"\n//                   value={editFormData.description}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </label>\n//               <br />\n//               <label>\n//                 Cover Image URL:\n//                 <input\n//                   type=\"text\"\n//                   name=\"coverImage\"\n//                   value={editFormData.coverImage}\n//                   onChange={handleChange}\n//                 />\n//               </label>\n//               <br />\n//               <label>\n//                 Publication Date:\n//                 <input\n//                   type=\"date\"\n//                   name=\"publicationDate\"\n//                   value={editFormData.publicationDate}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </label>\n//               <br />\n//               <button type=\"submit\">Save Changes</button>\n//               <button\n//                 type=\"button\"\n//                 onClick={() => setEditBook(null)} // Close the modal without saving\n//                 style={{ backgroundColor: 'gray', color: 'white', marginLeft: '10px' }}\n//               >\n//                 Cancel\n//               </button>\n//             </form>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const modalStyles = {\n//   position: 'fixed',\n//   top: 0,\n//   left: 0,\n//   right: 0,\n//   bottom: 0,\n//   backgroundColor: 'rgba(0, 0, 0, 0.5)',\n//   display: 'flex',\n//   justifyContent: 'center',\n//   alignItems: 'center',\n//   zIndex: 1000,\n// };\n\n// const modalContentStyles = {\n//   backgroundColor: 'white',\n//   padding: '20px',\n//   borderRadius: '5px',\n//   maxWidth: '500px',\n//   width: '100%',\n// };\n\n// export default Books;\n\n// -----------------------------------\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Books = ({\n  token\n}) => {\n  _s();\n  const [books, setBooks] = useState([]);\n  const [filteredBooks, setFilteredBooks] = useState([]); // To store the filtered books\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(''); // State for the search term\n  const [editBook, setEditBook] = useState(null);\n  const [editFormData, setEditFormData] = useState({\n    title: '',\n    author: '',\n    description: '',\n    coverImage: '',\n    publicationDate: ''\n  });\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        const response = await fetch('http://localhost:7000/books');\n        const data = await response.json();\n        setBooks(data);\n        setFilteredBooks(data); // Initially display all books\n      } catch (error) {\n        console.error(\"Error fetching books:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchBooks();\n  }, []);\n\n  // Filter books based on the search term\n  const handleSearch = e => {\n    const term = e.target.value;\n    setSearchTerm(term);\n\n    // Filter books by title, author, description, or publication date\n    const filtered = books.filter(book => book.title.toLowerCase().includes(term.toLowerCase()) || book.author.toLowerCase().includes(term.toLowerCase()) || book.description.toLowerCase().includes(term.toLowerCase()) || book.publicationDate.includes(term));\n    setFilteredBooks(filtered);\n  };\n  const handleDelete = async bookId => {\n    const confirmDelete = window.confirm('Are you sure you want to delete this book?');\n    if (confirmDelete) {\n      try {\n        const response = await fetch(`http://localhost:7000/books/${bookId}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to delete book');\n        }\n        setBooks(prevBooks => prevBooks.filter(book => book.id !== bookId));\n        setFilteredBooks(prevBooks => prevBooks.filter(book => book.id !== bookId)); // Remove from filtered list\n        alert('Book deleted successfully!');\n      } catch (error) {\n        console.error(\"Error deleting book:\", error);\n        alert('Failed to delete book');\n      }\n    }\n  };\n  const handleEdit = book => {\n    setEditBook(book);\n    setEditFormData({\n      title: book.title,\n      author: book.author,\n      description: book.description,\n      coverImage: book.coverImage,\n      publicationDate: book.publicationDate\n    });\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleEditSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:7000/books/${editBook.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(editFormData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update book');\n      }\n      const updatedBook = await response.json();\n      setBooks(prevBooks => prevBooks.map(book => book.id === updatedBook.id ? updatedBook : book));\n      setFilteredBooks(prevBooks => prevBooks.map(book => book.id === updatedBook.id ? updatedBook : book));\n      alert('Book updated successfully!');\n      setEditBook(null);\n    } catch (error) {\n      console.error(\"Error updating book:\", error);\n      alert('Failed to update book');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading books...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search by title, author, description, or publication date\",\n      value: searchTerm,\n      onChange: handleSearch,\n      style: {\n        marginBottom: '20px',\n        padding: '8px',\n        width: '300px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), filteredBooks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No books found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredBooks.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: book.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: book.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: book.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: book.publicationDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: book.coverImage,\n          alt: book.title,\n          style: {\n            width: '150px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 15\n        }, this), token && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEdit(book),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDelete(book.id),\n            style: {\n              backgroundColor: 'red',\n              color: 'white',\n              marginLeft: '10px'\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)]\n      }, book.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }, this), editBook && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: modalStyles,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: modalContentStyles,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit Book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleEditSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"title\",\n              value: editFormData.title,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Author:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"author\",\n              value: editFormData.author,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Description:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"description\",\n              value: editFormData.description,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Cover Image URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"coverImage\",\n              value: editFormData.coverImage,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Publication Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"publicationDate\",\n              value: editFormData.publicationDate,\n              onChange: handleChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setEditBook(null) // Close the modal without saving\n            ,\n            style: {\n              backgroundColor: 'gray',\n              color: 'white',\n              marginLeft: '10px'\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n};\n_s(Books, \"4cQiNqA7dcyM8GxSLpF9xpX93lM=\");\n_c = Books;\nconst modalStyles = {\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  zIndex: 1000\n};\nconst modalContentStyles = {\n  backgroundColor: 'white',\n  padding: '20px',\n  borderRadius: '5px',\n  maxWidth: '500px',\n  width: '100%'\n};\nexport default Books;\nvar _c;\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Books","token","_s","books","setBooks","filteredBooks","setFilteredBooks","loading","setLoading","searchTerm","setSearchTerm","editBook","setEditBook","editFormData","setEditFormData","title","author","description","coverImage","publicationDate","fetchBooks","response","fetch","data","json","error","console","handleSearch","e","term","target","value","filtered","filter","book","toLowerCase","includes","handleDelete","bookId","confirmDelete","window","confirm","method","ok","Error","prevBooks","id","alert","handleEdit","handleChange","name","prevState","handleEditSubmit","preventDefault","body","JSON","stringify","headers","updatedBook","map","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","style","marginBottom","padding","width","length","src","alt","onClick","backgroundColor","color","marginLeft","modalStyles","modalContentStyles","onSubmit","required","_c","position","top","left","right","bottom","display","justifyContent","alignItems","zIndex","borderRadius","maxWidth","$RefreshReg$"],"sources":["C:/Users/parve/Desktop/book system/frontend/src/components/Books.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n\r\n// const Books = ({ token }) => {\r\n//   const [books, setBooks] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [editBook, setEditBook] = useState(null); // Store the book being edited\r\n//   const [editFormData, setEditFormData] = useState({\r\n//     title: '',\r\n//     author: '',\r\n//     description: '',\r\n//     coverImage: '',\r\n//     publicationDate: '', // Added publicationDate to form data\r\n//   }); // Store the edited book data\r\n\r\n//   useEffect(() => {\r\n//     const fetchBooks = async () => {\r\n//       try {\r\n//         const response = await fetch('http://localhost:7000/books');\r\n//         const data = await response.json();\r\n//         setBooks(data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching books:\", error);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchBooks();\r\n//   }, []);\r\n\r\n//   const handleDelete = async (bookId) => {\r\n//     const confirmDelete = window.confirm('Are you sure you want to delete this book?');\r\n    \r\n//     if (confirmDelete) {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:7000/books/${bookId}`, {\r\n//           method: 'DELETE',\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error('Failed to delete book');\r\n//         }\r\n\r\n//         // Remove the deleted book from the state\r\n//         setBooks((prevBooks) => prevBooks.filter((book) => book.id !== bookId));\r\n//         alert('Book deleted successfully!');\r\n//       } catch (error) {\r\n//         console.error(\"Error deleting book:\", error);\r\n//         alert('Failed to delete book');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleEdit = (book) => {\r\n//     setEditBook(book);\r\n//     setEditFormData({\r\n//       title: book.title,\r\n//       author: book.author,\r\n//       description: book.description,\r\n//       coverImage: book.coverImage,\r\n//       publicationDate: book.publicationDate, // Set the publication date when editing\r\n//     });\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setEditFormData((prevState) => ({\r\n//       ...prevState,\r\n//       [name]: value,\r\n//     }));\r\n//   };\r\n\r\n//   const handleEditSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:7000/books/${editBook.id}`, {\r\n//         method: 'PUT',\r\n//         body: JSON.stringify(editFormData),\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to update book');\r\n//       }\r\n\r\n//       const updatedBook = await response.json();\r\n//       setBooks((prevBooks) =>\r\n//         prevBooks.map((book) =>\r\n//           book.id === updatedBook.id ? updatedBook : book\r\n//         )\r\n//       );\r\n//       alert('Book updated successfully!');\r\n//       setEditBook(null); // Close the modal after editing\r\n//     } catch (error) {\r\n//       console.error(\"Error updating book:\", error);\r\n//       alert('Failed to update book');\r\n//     }\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return <p>Loading books...</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Books</h1>\r\n//       {books.length === 0 ? (\r\n//         <p>No books available.</p>\r\n//       ) : (\r\n//         <ul>\r\n//           {books.map((book) => (\r\n//             <li key={book.id}>\r\n//               <h3>{book.title}</h3>\r\n//               <p>{book.author}</p>\r\n//               <p>{book.description}</p>\r\n//               <img src={book.coverImage} alt={book.title} style={{ width: '150px' }} />\r\n              \r\n//               {token && (\r\n//                 <>\r\n//                   <button onClick={() => handleEdit(book)}>\r\n//                     Edit\r\n//                   </button>\r\n//                   <button\r\n//                     onClick={() => handleDelete(book.id)}\r\n//                     style={{ backgroundColor: 'red', color: 'white', marginLeft: '10px' }}\r\n//                   >\r\n//                     Delete\r\n//                   </button>\r\n//                 </>\r\n//               )}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       )}\r\n\r\n//       {/* Edit Book Modal */}\r\n//       {editBook && (\r\n//         <div style={modalStyles}>\r\n//           <div style={modalContentStyles}>\r\n//             <h2>Edit Book</h2>\r\n//             <form onSubmit={handleEditSubmit}>\r\n//               <label>\r\n//                 Title:\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"title\"\r\n//                   value={editFormData.title}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <label>\r\n//                 Author:\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"author\"\r\n//                   value={editFormData.author}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <label>\r\n//                 Description:\r\n//                 <textarea\r\n//                   name=\"description\"\r\n//                   value={editFormData.description}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <label>\r\n//                 Cover Image URL:\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"coverImage\"\r\n//                   value={editFormData.coverImage}\r\n//                   onChange={handleChange}\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <label>\r\n//                 Publication Date:\r\n//                 <input\r\n//                   type=\"date\"\r\n//                   name=\"publicationDate\"\r\n//                   value={editFormData.publicationDate}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </label>\r\n//               <br />\r\n//               <button type=\"submit\">Save Changes</button>\r\n//               <button\r\n//                 type=\"button\"\r\n//                 onClick={() => setEditBook(null)} // Close the modal without saving\r\n//                 style={{ backgroundColor: 'gray', color: 'white', marginLeft: '10px' }}\r\n//               >\r\n//                 Cancel\r\n//               </button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const modalStyles = {\r\n//   position: 'fixed',\r\n//   top: 0,\r\n//   left: 0,\r\n//   right: 0,\r\n//   bottom: 0,\r\n//   backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n//   display: 'flex',\r\n//   justifyContent: 'center',\r\n//   alignItems: 'center',\r\n//   zIndex: 1000,\r\n// };\r\n\r\n// const modalContentStyles = {\r\n//   backgroundColor: 'white',\r\n//   padding: '20px',\r\n//   borderRadius: '5px',\r\n//   maxWidth: '500px',\r\n//   width: '100%',\r\n// };\r\n\r\n// export default Books;\r\n\r\n\r\n// -----------------------------------\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst Books = ({ token }) => {\r\n  const [books, setBooks] = useState([]);\r\n  const [filteredBooks, setFilteredBooks] = useState([]); // To store the filtered books\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState(''); // State for the search term\r\n  const [editBook, setEditBook] = useState(null);\r\n  const [editFormData, setEditFormData] = useState({\r\n    title: '',\r\n    author: '',\r\n    description: '',\r\n    coverImage: '',\r\n    publicationDate: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:7000/books');\r\n        const data = await response.json();\r\n        setBooks(data);\r\n        setFilteredBooks(data); // Initially display all books\r\n      } catch (error) {\r\n        console.error(\"Error fetching books:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBooks();\r\n  }, []);\r\n\r\n  // Filter books based on the search term\r\n  const handleSearch = (e) => {\r\n    const term = e.target.value;\r\n    setSearchTerm(term);\r\n\r\n    // Filter books by title, author, description, or publication date\r\n    const filtered = books.filter((book) =>\r\n      book.title.toLowerCase().includes(term.toLowerCase()) ||\r\n      book.author.toLowerCase().includes(term.toLowerCase()) ||\r\n      book.description.toLowerCase().includes(term.toLowerCase()) ||\r\n      book.publicationDate.includes(term)\r\n    );\r\n    setFilteredBooks(filtered);\r\n  };\r\n\r\n  const handleDelete = async (bookId) => {\r\n    const confirmDelete = window.confirm('Are you sure you want to delete this book?');\r\n    \r\n    if (confirmDelete) {\r\n      try {\r\n        const response = await fetch(`http://localhost:7000/books/${bookId}`, {\r\n          method: 'DELETE',\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete book');\r\n        }\r\n\r\n        setBooks((prevBooks) => prevBooks.filter((book) => book.id !== bookId));\r\n        setFilteredBooks((prevBooks) => prevBooks.filter((book) => book.id !== bookId)); // Remove from filtered list\r\n        alert('Book deleted successfully!');\r\n      } catch (error) {\r\n        console.error(\"Error deleting book:\", error);\r\n        alert('Failed to delete book');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEdit = (book) => {\r\n    setEditBook(book);\r\n    setEditFormData({\r\n      title: book.title,\r\n      author: book.author,\r\n      description: book.description,\r\n      coverImage: book.coverImage,\r\n      publicationDate: book.publicationDate,\r\n    });\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setEditFormData((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleEditSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:7000/books/${editBook.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(editFormData),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update book');\r\n      }\r\n\r\n      const updatedBook = await response.json();\r\n      setBooks((prevBooks) =>\r\n        prevBooks.map((book) =>\r\n          book.id === updatedBook.id ? updatedBook : book\r\n        )\r\n      );\r\n      setFilteredBooks((prevBooks) =>\r\n        prevBooks.map((book) =>\r\n          book.id === updatedBook.id ? updatedBook : book\r\n        )\r\n      );\r\n      alert('Book updated successfully!');\r\n      setEditBook(null);\r\n    } catch (error) {\r\n      console.error(\"Error updating book:\", error);\r\n      alert('Failed to update book');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading books...</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Books</h1>\r\n\r\n      {/* Search Bar */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search by title, author, description, or publication date\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n        style={{ marginBottom: '20px', padding: '8px', width: '300px' }}\r\n      />\r\n\r\n      {filteredBooks.length === 0 ? (\r\n        <p>No books found.</p>\r\n      ) : (\r\n        <ul>\r\n          {filteredBooks.map((book) => (\r\n            <li key={book.id}>\r\n              <h3>{book.title}</h3>\r\n              <p>{book.author}</p>\r\n              <p>{book.description}</p>\r\n              <p>{book.publicationDate}</p>\r\n              <img src={book.coverImage} alt={book.title} style={{ width: '150px' }} />\r\n              \r\n              {token && (\r\n                <>\r\n                  <button onClick={() => handleEdit(book)}>Edit</button>\r\n                  <button\r\n                    onClick={() => handleDelete(book.id)}\r\n                    style={{ backgroundColor: 'red', color: 'white', marginLeft: '10px' }}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {/* Edit Book Modal */}\r\n      {editBook && (\r\n        <div style={modalStyles}>\r\n          <div style={modalContentStyles}>\r\n            <h2>Edit Book</h2>\r\n            <form onSubmit={handleEditSubmit}>\r\n              <label>\r\n                Title:\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  value={editFormData.title}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Author:\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"author\"\r\n                  value={editFormData.author}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Description:\r\n                <textarea\r\n                  name=\"description\"\r\n                  value={editFormData.description}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Cover Image URL:\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"coverImage\"\r\n                  value={editFormData.coverImage}\r\n                  onChange={handleChange}\r\n                />\r\n              </label>\r\n              <br />\r\n              <label>\r\n                Publication Date:\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"publicationDate\"\r\n                  value={editFormData.publicationDate}\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n              </label>\r\n              <br />\r\n              <button type=\"submit\">Save Changes</button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => setEditBook(null)} // Close the modal without saving\r\n                style={{ backgroundColor: 'gray', color: 'white', marginLeft: '10px' }}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst modalStyles = {\r\n  position: 'fixed',\r\n  top: 0,\r\n  left: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  zIndex: 1000,\r\n};\r\n\r\nconst modalContentStyles = {\r\n  backgroundColor: 'white',\r\n  padding: '20px',\r\n  borderRadius: '5px',\r\n  maxWidth: '500px',\r\n  width: '100%',\r\n};\r\n\r\nexport default Books;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}